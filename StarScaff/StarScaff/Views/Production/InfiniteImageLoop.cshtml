
<script src="https://css-tricks.com/infinite-all-css-scrolling-slideshow/"></script>
<style type="text/css">
    #slider-container {
        height: 404px;
        width: 100vw;
        padding: 160px;
        margin: 0 auto;
        position: relative;
        overflow: hidden;
    }

    .slider {
        position: absolute;
        display: flex;
        flex-flow: row nowrap;
    }

    .slider-instant {
        transition: none;
    }

    .slider-animate {
        margin-left: 0;
    }

    .slider-extra {
        display: flex;
        flex-flow: row nowrap;
    }

    .slider-last {
        min-width: 100vw;
        max-width: 100vw;
        overflow: hidden;
    }

    .slider span {
        margin-right: 30px;
    }

    .slider .slider-extra {
        margin-right: 0;
    }

    .slider img {
        height: inherit;
        vertical-align: inherit;
        border: inherit;
        width: auto;
        height: auto;
        max-width: 400px;
        max-height: 400px;
    }
</style>
<script type="text/javascript">
    class InfiniteSlider {
        constructor(animTime = '10000', selector = '.slider', container = '#slider-container') {
            this.slider = document.querySelector(selector)
            this.container = document.querySelector(container)
            this.width = 0
            this.oldWidth = 0
            this.duration = parseInt(animTime)
            this.start = 0
            this.refresh = 0 //0, 1, or 2, as in steps of the animation
            this._prevStop = false
            this._stop = false
            this._oldTimestamp = 0
        }

            animate() {
                /* fix for browsers who like to run JS before images are loaded */
                const imgs = Array.prototype.slice.call(this.slider.querySelectorAll('img'))
                                .filter(img => {
                                    return img.naturalWidth === 0
                                })
                if (imgs.length > 0) {
                    window.requestAnimationFrame(this.animate.bind(this));
                    return
                }

                /* Add another copy of the slideshow to the end, keep track of original width */
                this.oldWidth = this.slider.offsetWidth
                const sliderText = '<span class="slider-extra">' + this.slider.innerHTML + '</span>'
                this.slider.innerHTML += sliderText

                /* can have content still when we move past original slider */
                this.width = this.slider.offsetWidth
                const minWidth = 2 * screen.width

                /* Add more slideshows if needed to keep a continuous stream of content */
                while (this.width < minWidth) {
                    this.slider.innerHTML += sliderText
                    this.width = this.slider.width
                }
                this.slider.querySelector('.slider-extra:last-child').classList.add('slider-last')

                /* loop animation endlesssly (this is pretty cool) */
                window.requestAnimationFrame(this.controlAnimation.bind(this))
            }

            halt() {
                this._stop = true
                this._prevStop = false
            }

            go() {
                this._stop = false
                this._prevStop = true
            }

            stagnate() {
                this.container.style.overflowX = "scroll"
            }

            controlAnimation(timestamp) {
                //console.log('this.stop: ' + this._stop + '\nthis.prevStop: ' + this._prevStop)
                if (this._stop === true) {
                    if (this._prevStop === false) {
                        this.slider.style.marginLeft = getComputedStyle(this.slider).marginLeft
                        this._prevStop = true
                        this._oldTimestamp = timestamp
                    }
                } else if (this._stop === false && this._prevStop === true) {
                    this._prevStop = false
                    this.start = this.start + (timestamp - this._oldTimestamp)
                } else {
                    //reset animation
                    if (this.refresh >= 1) {
                        this.start = timestamp
                        this.slider.style.marginLeft = 0
                        this.refresh = 0
                        window.requestAnimationFrame(this.controlAnimation.bind(this))
                        return
                    }
                    if (timestamp - this.start >= this.duration) {
                        this.refresh = 1
                    }

                    const perc = ((timestamp - (this.start)) / this.duration) * this.oldWidth
                    this.slider.style.marginLeft = (-perc) + 'px'
                }
                window.requestAnimationFrame(this.controlAnimation.bind(this))
                return
            }

            getIeWidth() {
                this.slider.style.marginLeft = '-99999px';
            }

            ie11Fix() {
                this.slider.querySelector('.slider-last').style.position = 'absolute';
            }
        }

        function detectIE() {
            var ua = window.navigator.userAgent
            var msie = ua.indexOf('MSIE ')

            if (msie > 0) {
                // IE 10 or older => return version number
                return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10)
            }

            var trident = ua.indexOf('Trident/')
            if (trident > 0) {
                // IE 11 => return version number
                var rv = ua.indexOf('rv:')
                return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10)
            }

            var edge = ua.indexOf('Edge/');
            if (edge > 0) {
                // Edge (IE 12+) => return version number
                return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10)
            }

            // other browser
            return false
        }


        document.addEventListener('DOMContentLoaded', function() {
            const slider = new InfiniteSlider(20000)
            const ie = detectIE()

            //Dont animate under IE10, just place the images
            if (ie !== false && ie < 10) {
                slider.stagnate()
                return
            }
            //IE 11 and lower, fix for width *increasing* as more of the slider is shown
            if (ie !== false && ie < 12) { slider.getIeWidth() }

            slider.animate()
            document.querySelector('#slider-container')
                .addEventListener('mouseenter', slider.halt.bind(slider))
            document.querySelector('#slider-container')
                .addEventListener('mouseleave', slider.go.bind(slider))

            if (ie === 11) {
                setTimeout(slider.ie11Fix.bind(slider), 1000)
            }
        });

</script>
<div id="slider-container">
    <div class="slider">
        <span><img src="~/Assets/Images/image1.jpg"></span>
        <span><img src="~/Assets/Images/image2.jpg"></span>
        <span><img src="~/Assets/Images/image4.jpg"></span>
        <span><img src="~/Assets/Images/image5.jpg"></span>
        <span><img src="~/Assets/Images/image6.jpg"></span>
        <span><img src="~/Assets/Images/image16.jpg"></span>
        <span><img src="~/Assets/Images/image17.jpg"></span>
        <span><img src="~/Assets/Images/image23.jpg"></span>
        <span><img src="~/Assets/Images/image24.jpg"></span>
        <span><img src="~/Assets/Images/image26.jpg"></span>
        <span><img src="~/Assets/Images/image27.jpg"></span>
        <span><img src="~/Assets/Images/image28.jpg"></span>
        <span><img src="~/Assets/Images/image29.jpg"></span>
        <span><img src="~/Assets/Images/image30.jpg"></span>
        <span><img src="~/Assets/Images/image31.jpg"></span>
        <span><img src="~/Assets/Images/image32.jpg"></span>
        <span><img src="~/Assets/Images/image33.jpg"></span>
        <span><img src="~/Assets/Images/image34.jpg"></span>
    </div>
</div>